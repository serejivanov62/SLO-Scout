"""PR generator service for GitOps deployment automation.

This module orchestrates the creation of GitOps pull requests/merge requests
with approved artifacts. It coordinates:
- Artifact bundling and organization
- Feature branch creation
- Conventional commit message generation
- PR/MR creation with templated body
- Support for both GitHub and GitLab

Implementation per spec.md FR-009 and research.md integration patterns.
"""

import logging
from typing import List, Optional, Dict, Union
from dataclasses import dataclass
from enum import Enum

from sqlalchemy.ext.asyncio import AsyncSession

from backend.src.integrations.github_client import (
    GitHubClient,
    GitHubConfig,
    GitHubCommit,
    PullRequest as GitHubPullRequest,
)
from backend.src.integrations.gitlab_client import (
    GitLabClient,
    GitLabConfig,
    GitLabCommit,
    MergeRequest as GitLabMergeRequest,
)
from backend.src.services.artifact_bundler import (
    ArtifactBundler,
    ArtifactBundle,
)


logger = logging.getLogger(__name__)


class VCSProvider(str, Enum):
    """Version control system provider."""

    GITHUB = "github"
    GITLAB = "gitlab"


@dataclass
class PRConfig:
    """Configuration for PR generation."""

    provider: VCSProvider
    repository: str  # "owner/repo" format
    base_branch: str = "main"
    github_token: Optional[str] = None
    gitlab_token: Optional[str] = None
    github_api_url: Optional[str] = None
    gitlab_api_url: Optional[str] = None


@dataclass
class PRResult:
    """Result of PR creation."""

    pr_url: str
    pr_number: Union[int, str]  # GitHub uses int, GitLab uses iid (int)
    branch_name: str
    artifacts_included: List[str]  # Artifact IDs
    commit_sha: str
    provider: VCSProvider


class PRGeneratorError(Exception):
    """Raised when PR generation fails."""

    pass


class PRGenerator:
    """Service for generating GitOps pull/merge requests with artifacts.

    Orchestrates the complete GitOps PR workflow:
    1. Bundle approved artifacts using ArtifactBundler
    2. Generate feature branch name following convention: slo-scout/{service}-slos
    3. Generate conventional commit message
    4. Create PR/MR with templated body including artifact summary
    5. Return PR URL and metadata

    Supports both GitHub (via GraphQL) and GitLab (via REST API).

    Conventional commit format per research.md:
        feat(slos): add SLOs for {service}

        - Add {N} Prometheus alert rules
        - Add {N} Grafana dashboards
        - Add {N} runbooks

        Generated by SLO-Scout

    PR body template includes:
    - Summary of artifacts by type
    - File listing with sizes
    - Testing checklist
    - Auto-generated footer

    Example:
        >>> config = PRConfig(
        ...     provider=VCSProvider.GITHUB,
        ...     repository="org/observability-config",
        ...     github_token="ghp_...",
        ... )
        >>> generator = PRGenerator(db_session, config)
        >>> result = await generator.create_pr(
        ...     artifact_ids=["uuid1", "uuid2", "uuid3"],
        ...     service_name="payments-api",
        ... )
        >>> print(result.pr_url)
        https://github.com/org/observability-config/pull/123
    """

    def __init__(self, session: AsyncSession, config: PRConfig):
        """Initialize PR generator.

        Args:
            session: Database session for querying artifacts
            config: PR generation configuration

        Raises:
            PRGeneratorError: If configuration is invalid
        """
        self.session = session
        self.config = config
        self.bundler = ArtifactBundler(session)

        # Validate provider-specific tokens
        if config.provider == VCSProvider.GITHUB and not config.github_token:
            raise PRGeneratorError("GitHub token required for GitHub provider")
        if config.provider == VCSProvider.GITLAB and not config.gitlab_token:
            raise PRGeneratorError("GitLab token required for GitLab provider")

    def generate_branch_name(self, service_name: str) -> str:
        """Generate feature branch name following convention.

        Convention: slo-scout/{service}-slos

        Args:
            service_name: Service name

        Returns:
            Branch name
        """
        # Sanitize service name
        safe_service = service_name.lower().replace(" ", "-").replace("_", "-")
        return f"slo-scout/{safe_service}-slos"

    def generate_commit_message(
        self,
        service_name: str,
        bundle: ArtifactBundle,
    ) -> str:
        """Generate conventional commit message.

        Format:
            feat(slos): add SLOs for {service}

            - Add {N} Prometheus alert rules
            - Add {N} Grafana dashboards
            - Add {N} runbooks

            Generated by SLO-Scout

        Args:
            service_name: Service name
            bundle: Artifact bundle

        Returns:
            Formatted commit message
        """
        # Title line
        title = f"feat(slos): add SLOs for {service_name}"

        # Build summary bullets
        bullets = []
        for artifact_type, count in sorted(bundle.summary.items()):
            type_name = artifact_type.replace("_", " ").title()
            plural = "s" if count != 1 else ""
            bullets.append(f"- Add {count} {type_name}{plural}")

        # Combine
        message_lines = [
            title,
            "",
        ]
        message_lines.extend(bullets)
        message_lines.extend([
            "",
            "Generated by SLO-Scout",
        ])

        return "\n".join(message_lines)

    def generate_pr_title(self, service_name: str) -> str:
        """Generate PR title.

        Args:
            service_name: Service name

        Returns:
            PR title
        """
        return f"Add SLOs for {service_name} service"

    def generate_pr_body(
        self,
        service_name: str,
        bundle: ArtifactBundle,
    ) -> str:
        """Generate PR body with artifact summary and testing checklist.

        Args:
            service_name: Service name
            bundle: Artifact bundle

        Returns:
            Markdown-formatted PR body
        """
        # Use bundler to generate artifact summary
        artifact_summary = self.bundler.generate_pr_summary_markdown(bundle)

        # Build complete PR body
        body_lines = [
            f"# Add SLOs for {service_name}",
            "",
            "This PR adds SLO monitoring configuration generated by SLO-Scout.",
            "",
            artifact_summary,
            "",
            "## Test Plan",
            "",
            "- [ ] Validate Prometheus rules with `promtool check rules`",
            "- [ ] Import Grafana dashboards to staging",
            "- [ ] Review runbook steps for accuracy",
            "- [ ] Verify alert thresholds align with SLO targets",
            "",
            "## Deployment Notes",
            "",
            "- All artifacts have passed validation",
            "- Artifacts are approved and ready for production deployment",
            "- Follow your standard GitOps deployment process",
            "",
            "---",
            "",
            "ðŸ¤– Generated with [SLO-Scout](https://github.com/slo-scout/slo-scout)",
            "",
            "Co-Authored-By: SLO-Scout <noreply@slo-scout.io>",
        ]

        return "\n".join(body_lines)

    async def create_pr_github(
        self,
        bundle: ArtifactBundle,
        service_name: str,
    ) -> PRResult:
        """Create GitHub pull request.

        Args:
            bundle: Bundled artifacts
            service_name: Service name

        Returns:
            PR creation result

        Raises:
            PRGeneratorError: If PR creation fails
        """
        # Initialize GitHub client
        github_config = GitHubConfig(
            token=self.config.github_token,
            api_url=self.config.github_api_url or "https://api.github.com",
        )

        async with GitHubClient(github_config) as client:
            # Generate names
            branch_name = self.generate_branch_name(service_name)
            commit_message = self.generate_commit_message(service_name, bundle)
            pr_title = self.generate_pr_title(service_name)
            pr_body = self.generate_pr_body(service_name, bundle)

            # Convert bundle files to GitHub commits
            files = [
                GitHubCommit(path=f.path, content=f.content)
                for f in bundle.files
            ]

            try:
                # Create PR
                pr = await client.create_pull_request(
                    repo=self.config.repository,
                    branch_name=branch_name,
                    base_branch=self.config.base_branch,
                    files=files,
                    commit_message=commit_message,
                    pr_title=pr_title,
                    pr_body=pr_body,
                )

                logger.info(
                    f"Created GitHub PR #{pr.number} for {service_name}",
                    extra={
                        "service_name": service_name,
                        "pr_number": pr.number,
                        "pr_url": pr.url,
                        "artifacts_count": bundle.artifact_count,
                    },
                )

                return PRResult(
                    pr_url=pr.url,
                    pr_number=pr.number,
                    branch_name=branch_name,
                    artifacts_included=[f.artifact_id for f in bundle.files],
                    commit_sha="",  # GitHub PR doesn't return commit SHA directly
                    provider=VCSProvider.GITHUB,
                )

            except Exception as e:
                logger.error(
                    f"Failed to create GitHub PR: {e}",
                    extra={"service_name": service_name, "error": str(e)},
                )
                raise PRGeneratorError(f"GitHub PR creation failed: {e}") from e

    async def create_pr_gitlab(
        self,
        bundle: ArtifactBundle,
        service_name: str,
    ) -> PRResult:
        """Create GitLab merge request.

        Args:
            bundle: Bundled artifacts
            service_name: Service name

        Returns:
            MR creation result

        Raises:
            PRGeneratorError: If MR creation fails
        """
        # Initialize GitLab client
        gitlab_config = GitLabConfig(
            token=self.config.gitlab_token,
            api_url=self.config.gitlab_api_url or "https://gitlab.com/api/v4",
        )

        async with GitLabClient(gitlab_config) as client:
            # Generate names
            branch_name = self.generate_branch_name(service_name)
            commit_message = self.generate_commit_message(service_name, bundle)
            mr_title = self.generate_pr_title(service_name)
            mr_description = self.generate_pr_body(service_name, bundle)

            # Convert bundle files to GitLab commits
            files = [
                GitLabCommit(path=f.path, content=f.content, action="create")
                for f in bundle.files
            ]

            try:
                # Create MR
                mr = await client.create_merge_request(
                    project=self.config.repository,
                    branch_name=branch_name,
                    target_branch=self.config.base_branch,
                    files=files,
                    commit_message=commit_message,
                    mr_title=mr_title,
                    mr_description=mr_description,
                )

                logger.info(
                    f"Created GitLab MR !{mr.iid} for {service_name}",
                    extra={
                        "service_name": service_name,
                        "mr_iid": mr.iid,
                        "mr_url": mr.web_url,
                        "artifacts_count": bundle.artifact_count,
                    },
                )

                return PRResult(
                    pr_url=mr.web_url,
                    pr_number=mr.iid,
                    branch_name=branch_name,
                    artifacts_included=[f.artifact_id for f in bundle.files],
                    commit_sha="",  # MR doesn't return commit SHA directly
                    provider=VCSProvider.GITLAB,
                )

            except Exception as e:
                logger.error(
                    f"Failed to create GitLab MR: {e}",
                    extra={"service_name": service_name, "error": str(e)},
                )
                raise PRGeneratorError(f"GitLab MR creation failed: {e}") from e

    async def create_pr(
        self,
        artifact_ids: List[str],
        service_name: str,
    ) -> PRResult:
        """Create GitOps pull/merge request with approved artifacts.

        Main entry point for PR generation. Orchestrates:
        1. Bundle artifacts by IDs
        2. Validate approval status
        3. Create PR/MR based on configured provider
        4. Return PR URL and metadata

        Args:
            artifact_ids: List of artifact UUIDs to include
            service_name: Service name for organizing artifacts

        Returns:
            PR creation result with URL and metadata

        Raises:
            PRGeneratorError: If bundling or PR creation fails
        """
        # Bundle artifacts
        try:
            bundle = await self.bundler.bundle_artifacts(
                artifact_ids=artifact_ids,
                service_name=service_name,
                validate_approval=True,
            )
        except Exception as e:
            logger.error(
                f"Failed to bundle artifacts: {e}",
                extra={"artifact_ids": artifact_ids, "error": str(e)},
            )
            raise PRGeneratorError(f"Artifact bundling failed: {e}") from e

        # Create PR based on provider
        if self.config.provider == VCSProvider.GITHUB:
            return await self.create_pr_github(bundle, service_name)
        elif self.config.provider == VCSProvider.GITLAB:
            return await self.create_pr_gitlab(bundle, service_name)
        else:
            raise PRGeneratorError(f"Unsupported provider: {self.config.provider}")

    async def create_pr_for_slo(
        self,
        slo_id: str,
        service_name: str,
    ) -> PRResult:
        """Create PR with all approved artifacts for an SLO.

        Convenience method to create PR for all artifacts associated with
        a specific SLO.

        Args:
            slo_id: SLO UUID
            service_name: Service name

        Returns:
            PR creation result

        Raises:
            PRGeneratorError: If no approved artifacts found or PR creation fails
        """
        try:
            bundle = await self.bundler.bundle_artifacts_by_slo(
                slo_id=slo_id,
                service_name=service_name,
            )
        except Exception as e:
            logger.error(
                f"Failed to bundle artifacts for SLO {slo_id}: {e}",
                extra={"slo_id": slo_id, "error": str(e)},
            )
            raise PRGeneratorError(f"Artifact bundling failed for SLO: {e}") from e

        # Create PR based on provider
        if self.config.provider == VCSProvider.GITHUB:
            return await self.create_pr_github(bundle, service_name)
        elif self.config.provider == VCSProvider.GITLAB:
            return await self.create_pr_gitlab(bundle, service_name)
        else:
            raise PRGeneratorError(f"Unsupported provider: {self.config.provider}")
